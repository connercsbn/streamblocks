// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum InitiationState {
  UNINITIATED
  INITIATING
  INITIATED
}

model User {
  id              String          @id @default(cuid())
  name            String?
  email           String?         @unique
  emailVerified   DateTime?
  image           String?
  initiationState InitiationState @default(UNINITIATED)
  progress        Progress?
  accounts        Account[]
  sessions        Session[]
  streamers       Streamer[]
  progressId      Int?
}

model Progress {
  id              Int      @id @default(autoincrement())
  userId          String   @unique
  currentStreamer Streamer @relation(fields: [streamerId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
  message         String
  streamerId      Int

  @@index([streamerId])
}

model Streamer {
  id           Int        @id @default(autoincrement())
  twitchId     String
  displayName  String
  imageUrl     String
  description  String     @db.Text()
  userId       String
  color        String?
  viewCount    Int
  isFavorite   Boolean    @default(false)
  isOnCalendar Boolean    @default(true)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  calendar     Calendar?
  Progress     Progress[]

  @@index([userId])
}

model Calendar {
  id                 Int                 @id @default(autoincrement())
  segments           CalendarSegment[]
  unofficialSchedule UnofficialSchedule?
  lastFetched        DateTime            @default(now())
  streamerId         Int                 @unique
  Streamer           Streamer            @relation(fields: [streamerId], references: [id], onDelete: Cascade)
}

model UnofficialDay {
  id                   Int                 @id @unique @default(autoincrement())
  day                  String
  start                DateTime?
  end                  DateTime?
  unofficialSchedule   UnofficialSchedule? @relation(fields: [unofficialScheduleId], references: [id], onDelete: Cascade)
  unofficialScheduleId Int?

  @@index([unofficialScheduleId])
}

model UnofficialSchedule {
  id             Int             @id @unique @default(autoincrement())
  unofficialDays UnofficialDay[]
  calendarId     Int             @unique
  calendar       Calendar        @relation(fields: [calendarId], references: [id], onDelete: Cascade)
}

model CalendarSegment {
  id                Int      @id @default(autoincrement())
  segmentId         String
  startTime         String
  endTime           String
  title             String
  modifiedStartTime String?
  modifiedEndTime   String?
  canceledUntil     String?
  calendarId        Int
  calendar          Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)

  @@index([calendarId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
